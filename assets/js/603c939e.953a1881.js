(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{122:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),b=n,f=p["".concat(c,".").concat(b)]||p[b]||m[b]||o;return r?a.a.createElement(f,i(i({ref:t},s),{},{components:r})):a.a.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<o;s++)c[s]=r[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},89:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return u}));var n=r(3),a=r(7),o=(r(0),r(122)),c={title:"useRecoilValue()",sidebar_label:"useRecoilValue()"},i={unversionedId:"api-reference/core/useRecoilValue",id:"api-reference/core/useRecoilValue",isDocsHomePage:!1,title:"useRecoilValue()",description:"Returns the value of the given Recoil state.",source:"@site/docs/api-reference/core/useRecoilValue.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/useRecoilValue",permalink:"/docs/api-reference/core/useRecoilValue",editUrl:"https://github.com/justjavac/recoil/tree/master/docs/api-reference/core/useRecoilValue.md",version:"current",sidebar_label:"useRecoilValue()",frontMatter:{title:"useRecoilValue()",sidebar_label:"useRecoilValue()"},sidebar:"someSidebar",previous:{title:"useRecoilState()",permalink:"/docs/api-reference/core/useRecoilState"},next:{title:"useSetRecoilState()",permalink:"/docs/api-reference/core/useSetRecoilState"}},l=[{value:"Example",id:"example",children:[]}],s={toc:l};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Returns the value of the given Recoil state."),Object(o.b)("p",null,"This hook will implicitly subscribe the component to the given state."),Object(o.b)("hr",null),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"state"),": an ",Object(o.b)("a",{parentName:"li",href:"/docs/api-reference/core/atom"},Object(o.b)("inlineCode",{parentName:"a"},"atom"))," or ",Object(o.b)("a",{parentName:"li",href:"/docs/api-reference/core/selector"},Object(o.b)("inlineCode",{parentName:"a"},"selector")))),Object(o.b)("p",null,"This is the recommended hook to use when a component intends to read state without writing to it as this hook works with both ",Object(o.b)("strong",{parentName:"p"},"read-only state")," and ",Object(o.b)("strong",{parentName:"p"},"writeable state"),". Atoms are writeable state while selectors may be either read-only or writeable. See ",Object(o.b)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},Object(o.b)("inlineCode",{parentName:"a"},"selector()"))," for more info."),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import {atom, selector, useRecoilValue} from 'recoil';\n\nconst namesState = atom({\n  key: 'namesState',\n  default: ['', 'Ella', 'Chris', '', 'Paul'],\n});\n\nconst filteredNamesState = selector({\n  key: 'filteredNamesState',\n  get: ({get}) => get(namesState).filter((str) => str !== ''),\n});\n\nfunction NameDisplay() {\n  const names = useRecoilValue(namesState);\n  const filteredNames = useRecoilValue(filteredNamesState);\n\n  return (\n    <>\n      Original names: {names.join(',')}\n      <br />\n      Filtered names: {filteredNames.join(',')}\n    </>\n  );\n}\n")))}u.isMDXComponent=!0}}]);